) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=14),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
# legend.margin = margin(t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.4, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -3.4, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.4, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.5, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.6, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.5, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
df <- merge(bbox, data, by = "id")
df$Bench <- factor(df$Bench, levels = c("QDS", "QDS (w/o p-digest)", "SQLite", "PostgreSQL", "MonetDB"))
df <- df %>%
group_by(width, Bench) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time),
Stde  = sd(Time) / n()
)
df %>%
ggplot(aes(x = width, y = Mean, colour = Bench)) +
geom_errorbar(aes(ymin = Mean - Stde, ymax = Mean + Stde)) +
geom_line() +
geom_point() +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
text = element_text(size=12),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(l = -0.6, t = -0.1, b = -0.2, unit='cm')
# plot.margin = unit(c(-0.1,0.1,0,0), "lines")
# axis.text.y = element_blank(),
# axis.ticks = element_blank(),
# strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c('#377EB8', '#E41A1C', '#984ea3', '#ff7f00', '#4daf4a')) +
scale_x_continuous(name ="Percentage of Synthetic Dataset (50M)", breaks = seq(0, 10, by = 1), labels = function(x) paste0(x * 10, "%")) +
# scale_y_continuous(name ="Time (ms)")
scale_y_continuous(name ="Time (ms)", trans='log10', breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x)))
# scale_y_continuous(trans='log2', breaks = trans_breaks("log2", function(x) 2^x), labels = trans_format("log2", math_format(2^.x)))
ggsave('boxplot.png')
ggsave('boxplot.pdf')
