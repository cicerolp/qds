d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9.0, 7.5, 6.0, 4.5))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 10 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9.0, 7.5, 6.0, 4.5))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 10 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 1 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 2 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 2 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 1 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 2 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
library(lhs)
library(tidyverse)
library(DoE.wrapper)
# dfwuni = data.frame( width = 10 / ( 2 ** c(1:2)))
dfwuni = data.frame( width = c(9, 8, 7, 6, 5, 4, 3, 2, 1))
dfwuni$height = dfwuni$width
dfwuni$width
bound = c(0, 10)
flhs = function(w) {
wq = w
hq = wq # square queries
d = lhs.design( type= "maximin" , nruns = 3 ,nfactors = 2,
factor.names=list(
x = c(bound[1] + hq / 2, bound[2] - hq / 2),
y = c(bound[1] + wq / 2, bound[2] - wq / 2))
)
d$width = wq
d$height = hq
d
}
set.seed(42);
# dflist = mapply(flhs,dfwuni$width,dfwuni$height)
d8_llw = do.call(rbind, lapply(dfwuni$width,flhs))
head(d8_llw)
set.seed(42);
n = 10**4
x <- runif(n, min = 0, max = 10)
y <- runif(n, min = 0, max = 10)
data.frame(x, y) %>%
ggplot(aes(x, y)) +
geom_tile(data = d8_llw, aes(width = width, height = height,
color = factor(width), fill = factor(width)),
size = 0.5, alpha = 0.1)+
# geom_point(alpha = 0.1)  +
labs(color = "Query Width " ) +
theme(legend.position="bottom") +
guides(color = guide_legend(nrow = 1), fill=FALSE)
d = d8_llw
bbox = data.frame(y0 = d$y - d$height / 2,
x0 = d$x - d$width / 2,
y1 = d$y + d$height / 2,
x1 = d$x + d$width / 2)
tail(bbox)
lon2tilex <- function(lon, z) {
x <- (lon + 0.0) / 10.0 * (2 ^ z)
return(bitwAnd(x, (2 ^ z) - 1))
}
lat2tiley <- function(lat, z) {
y = (lat + 0.0) / 10.0 * (2 ^ z);
return(bitwAnd(y, (2 ^ z) - 1))
}
bbox <- bbox %>%
mutate(
tiley0 = lat2tiley(y0, 8),
tilex0 = lon2tilex(x0, 8),
tiley1 = lat2tiley(y1, 8),
tilex1 = lon2tilex(x1, 8)
)
output <- {}
for (row in 1:nrow(bbox)) {
output <- c(sprintf("/api/query/dataset=gaussian/aggr=quantile.gaussian.(0.500)/const=coord.region.(%d:%d:%d:%d:8)",
bbox[row,]$tilex0,
bbox[row,]$tiley0,
bbox[row,]$tilex1,
bbox[row,]$tiley1),
output)
}
output
write_lines(output, 'gaussian-lhs-region.log')
