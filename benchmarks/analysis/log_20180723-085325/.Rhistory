library("lhs")
install.packages(c("lhs", "scales", "RColorBrewer", "tidyverse"))
library("lhs")
library("scales")
library("tidyverse")
library("RColorBrewer")
read_data <- function(type, size) {
data <- c()
lines <- read_lines(Sys.glob(paste0(type, "*", size, "*")))
for (i in 1:length(lines)){
if (length(grep("sort_data", lines[i])) != 1 & length(grep("validation", lines[i])) != 1) {
data <- c(data, lines[i])
}
}
return (read_delim(paste(data, collapse = "\n"), delim = ";", col_names = FALSE))
}
load_bp <- function(type, size) {
df <- read_data(type, size)
df <- df %>%
# filter(X3 < 10) %>%
group_by(X3, X5) %>%
summarise(
Time = sum(X7)
) %>%
group_by(X3) %>%
summarise(
Max = max(Time),
Min = min(Time),
Mean = mean(Time),
Stdv = sd(Time)
) %>%
mutate(
Bench = if_else(type == "raw", "Naive", "QDS"),
Size = size
)
return (df)
}
load_h <- function(type, size) {
df <- read_data(type, size)
df <- df %>%
# filter(X3 < 10) %>%
group_by(X3, X8) %>%
summarise(
Max = max(X7),
Min = min(X7),
Mean = mean(X7),
Stdv = sd(X7)
) %>%
mutate(
Bench = if_else(type == "raw", "Naive", "QDS"),
Size = size
)
return (df)
}
# facet_names <- list(
#   'pdigest <1M>'="p-digest",
#   'raw <1M>'="Naive"
# )
# facet_labeller <- function(variable, value){
#   return(facet_names[value])
# }
data <- rbind(load_h("pdigest", "1M"), load_h("raw", "1M"))
data$Bench <- as.factor(data$Bench)
data$Bench <- factor(data$Bench, levels = c("QDS", "Naive"))
data %>%
filter(X3 <=8) %>%
ggplot(aes(x = X3, y = Mean)) +
geom_bar(aes(fill = X8), stat="identity") +
scale_x_continuous(breaks = round(seq(0, 25, by = 1), 2)) +
# facet_wrap(. ~ Bench , scales = "fixed", ncol = 1, labeller = facet_labeller) +
facet_wrap(. ~ Bench , scales = "fixed", ncol = 1, strip.position="right") +
theme_bw() +
labs(fill = "Query Steps") +
scale_fill_manual(values = brewer.pal(3, "Paired"), labels = c("Aggregation", "Intersection", "Selection")) +
labs(titles = "Detailed Performance of Quantile (0.5) Computation") +
ylab("Running Time (ms)") +
xlab(expression('Tile Resolution (z) (' %<=>% '4'^Z*' merge operations)')) +
guides(colour = FALSE) +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "top",
legend.direction = "horizontal",
legend.position = c(0.5, 0.975),
legend.title = element_text(size = 10),
legend.margin = margin(t = 0, b = 0, unit='cm'),
plot.margin = unit(c(0,0.1,0,0), "lines")
) +
# scale_colour_manual(values = brewer.pal(3, "Set1")) +
geom_hline(yintercept = 40, linetype="dashed", color = "black") +
annotate("text", x = 0.9, y = 30, label = "real-time (<= 40 ms)", angle = 0)
# coord_cartesian(xlim = c(-0.5, 8.5), clip = "off")
# ggsave("bar.pdf")
data <- rbind(
load_bp("pdigest", "1M"),
load_bp("raw", "1M"),
#load_bp("pdigest", "10M"),
#load_bp("raw", "10M"),
load_bp("pdigest", "100M"),
load_bp("raw", "100M")
)
data$Bench <- as.factor(data$Bench)
data$Size <- factor(data$Size, levels = c("1M", "10M", "100M"))
data$Bench <- factor(data$Bench, levels = c("QDS", "Naive"))
data %>%
filter(X3 <= 8) %>%
ggplot(aes(x = Bench, y = Mean)) +
geom_boxplot(aes(colour = Bench)) +
coord_flip() +
labs(title = "") +
# labs(title = "Performance of Quantile (0.5) Computation") +
ylab("Running Time (ms)") +
xlab("") +
# guides(colour = FALSE) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, size = 11),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.justification = "center",
legend.direction = "horizontal",
# legend.text = element_text(angle = 90, hjust = 1),
# legend.position = c(0.5, 0.98),
legend.position = "top",
# legend.title = element_text(size = 11),
# legend.title = element_blank(),
legend.margin = margin(t = -0.1, b = -0.2, unit='cm'),
plot.margin = unit(c(0,0.1,0,-0.9), "lines"),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.text.y = element_text(size = 8)
) +
scale_colour_manual(values = c("#377EB8", "#E41A1C")) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 12)) +
scale_x_discrete(limits = rev(levels(data$Bench))) +
facet_wrap(~ Size, scales = "free_x", ncol = 1, strip.position="right") +
guides(colour = guide_legend(title = "Performance of Quantile (0.5) Computation"))
# ggsave("boxplot.pdf")
